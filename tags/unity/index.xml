<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unity on Antonio Moon´s</title>
    <link>https://moonantonio.github.io/tags/unity/</link>
    <description>Recent content in Unity on Antonio Moon´s</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-es</language>
    <lastBuildDate>Tue, 17 Apr 2018 14:04:47 +0200</lastBuildDate>
    
	<atom:link href="https://moonantonio.github.io/tags/unity/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ScriptableObjects</title>
      <link>https://moonantonio.github.io/post/2018/dev/002/</link>
      <pubDate>Tue, 17 Apr 2018 14:04:47 +0200</pubDate>
      
      <guid>https://moonantonio.github.io/post/2018/dev/002/</guid>
      <description>Los Objetos Scriptables son un tipo especial de objeto de datos en Unity. Tienen varios beneficios importantes, pero es posible que no funcionen de manera ideal para cada situación.
Introducción a los Objetos Scriptables Puede pensar en un objeto programable como un objeto destinado solo a contener datos. Si ha estado utilizando clases o estructuras tradicionales de C# para objetos simples solo de datos, podría utilizarlas en su lugar. Por supuesto, usted se estará preguntando &amp;ldquo;por qué&amp;rdquo; le gustaría usar un Objeto Scriptable.</description>
    </item>
    
    <item>
      <title>MonoBehavior en Unity</title>
      <link>https://moonantonio.github.io/post/2018/dev/001/</link>
      <pubDate>Sat, 10 Mar 2018 20:34:29 +0100</pubDate>
      
      <guid>https://moonantonio.github.io/post/2018/dev/001/</guid>
      <description>Unity puede estar desperdiciando mucho rendimiento de la CPU simplemente llamando a sus funciones MonoBehaviour. Realmente no importa lo que estén haciendo tus scripts. Si tiene cientos o miles de ellos, hay que tener en cuenta que hay un nuevo campo de optimización.
Métodos mágicos Las llamadas a funciones MonoBehaviour son lentas. Estoy hablando de funciones como Update() , LateUpdate(), OnRender(), etc. Son los llamados métodos mágicos, y si estas familiarizado con los lenguajes de programación orientados a objetos, este concepto parece llamar a un método usando mecanismo de reflexión (la reflexión habilita llamadas de métodos incluso si no conoce la interfaz).</description>
    </item>
    
    <item>
      <title>Feliz 2018 y nuevas noticias con el</title>
      <link>https://moonantonio.github.io/post/2017/diario/010/</link>
      <pubDate>Tue, 09 Jan 2018 03:50:03 +0100</pubDate>
      
      <guid>https://moonantonio.github.io/post/2017/diario/010/</guid>
      <description>Empezamos el año con nuevas noticias De primeras, feliz año 2018 a los lectores, ^^. Queria traer estas noticias a principios de año, asique aqui las dejo.
Unity dejara de dar soporte para MonoDevelop-Unity a partir de la Unity 2018.1, esto quiere decir que en Unity 2018.1 no vendra con el IDE de MonoDevelop, ya que no admite muchas de las caracteristicas a las que esta migrando Unity con .</description>
    </item>
    
    <item>
      <title>MVC simplificado.</title>
      <link>https://moonantonio.github.io/post/2017/dev/014/</link>
      <pubDate>Tue, 07 Nov 2017 22:18:34 +0100</pubDate>
      
      <guid>https://moonantonio.github.io/post/2017/dev/014/</guid>
      <description>Introduccion Los programadores principiantes generalmente comienzan a aprender el oficio con el Hello World. A partir de ahí, sin un patron de diseño, se suele aumentar sin ninguna metodologia los proyectos y terminan siendo un caos. Cada nuevo desafío lleva a casa una lección importante:
Cuanto más grande es el proyecto, más grande es el espagueti.

Es fácil ver que en equipos grandes o pequeños, uno no puede hacer imprudentemente lo que le plazca.</description>
    </item>
    
    <item>
      <title>Unity &#43; GeForce Share (Shadow Play) [Tips]</title>
      <link>https://moonantonio.github.io/post/2017/dev/004/</link>
      <pubDate>Fri, 31 Mar 2017 00:32:33 +0200</pubDate>
      
      <guid>https://moonantonio.github.io/post/2017/dev/004/</guid>
      <description>De esta manera tus jugadores con tarjetas Nvidia podrán usar esta característica sin ningún problema. GeForce Experience es una herramienta de las tarjetas Nvidia que permite gestionar tus juegos y optimizarlos, mantener los controladores actualizados y por supuesto la función “Share” que permite a los gamers compartir sus jugadas con los demás, esto es gracias a que la herramienta puede grabar nativamente una partida o bien una porción.
Quizás no lo hayas considerado pero esto es parte vital de la experiencia que tu juego debería brindarle a sus jugadores, y es posible que hayas compilado tu juego de manera que no sea compatible con esta característica, si no has configurado las siguientes opciones en Edit &amp;gt; Project Settings &amp;gt; Player.</description>
    </item>
    
    <item>
      <title>TextMesh Pro Unity3D</title>
      <link>https://moonantonio.github.io/post/2017/utiles/005/</link>
      <pubDate>Mon, 20 Mar 2017 16:00:38 +0100</pubDate>
      
      <guid>https://moonantonio.github.io/post/2017/utiles/005/</guid>
      <description>TEXTMESH PRO SE UNE A UNITY.  Unity se complace en anunciar una nueva y poderosa adición a nuestra suite de herramientas creativa: TextMesh Pro y su creador, Stephan Bouchard, se han unido a la unidad!
 TextMesh Pro es un reemplazo de componentes existentes de la unidad de texto como texto de malla y la interfaz de usuario de texto. TextMesh Pro utiliza Firmado Distancia Field (SDF) como su principal canal de renderizado de texto por lo que es posible representar el texto limpiamente en cualquier tamaño de punto y la resolución.</description>
    </item>
    
  </channel>
</rss>