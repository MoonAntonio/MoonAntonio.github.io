<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programacion on Antonio Moon´s</title>
    <link>https://moonantonio.github.io/tags/programacion/</link>
    <description>Recent content in Programacion on Antonio Moon´s</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-es</language>
    <copyright>Moon Antonio</copyright>
    <lastBuildDate>Fri, 16 Feb 2018 10:40:58 +0100</lastBuildDate>
    
	<atom:link href="https://moonantonio.github.io/tags/programacion/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Clase Abstracta VS Interfaces</title>
      <link>https://moonantonio.github.io/post/2017/programacion/007/</link>
      <pubDate>Fri, 16 Feb 2018 10:40:58 +0100</pubDate>
      
      <guid>https://moonantonio.github.io/post/2017/programacion/007/</guid>
      <description>El uso de clases abstractas y herencia para organizar la lógica de nuestras aplicaciones se puede sustituir o complementar con interfaces y métodos de extensión usando C#. En este artículo veremos un ejemplo de ambas aproximaciones así como sus ventajas e inconvenientes.
Clases Abstractas Las clases abstractas nos permiten tener una clase base con cierta funcionalidad común ya implementada, sobre la que podemos heredar y especificar algunos métodos. Para este ejemplo, la clase Transporte implementa el método Mover, y las clases Coche y Bicicleta especifican el número de ruedas.</description>
    </item>
    
    <item>
      <title>Buenas Practicas de programacion</title>
      <link>https://moonantonio.github.io/post/2017/utiles/013/</link>
      <pubDate>Mon, 16 Oct 2017 19:07:21 +0200</pubDate>
      
      <guid>https://moonantonio.github.io/post/2017/utiles/013/</guid>
      <description>Estoy seguro de que si te dedicas a programar, conoces a Robert &amp;ldquo;Uncle&amp;rdquo; Martin. Su libro Clean Code es uno de los más recomendados en la lista de libros que todo desarrollador debería leer. Martin, con sus cosas buenas y malas, es uno de los desarrolladores más influyentes del panorama ingenieril. Fuerte defensor de TDD, de la cobertura de tests y otras buenas prácticas, y además cuenta con muchas personas que siguen sus enseñanzas a rajatabla.</description>
    </item>
    
  </channel>
</rss>