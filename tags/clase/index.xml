<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clase on Antonio Moon´s</title>
    <link>https://moonantonio.github.io/tags/clase/</link>
    <description>Recent content in Clase on Antonio Moon´s</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-es</language>
    <lastBuildDate>Mon, 24 Apr 2017 12:52:34 +0200</lastBuildDate>
    
	<atom:link href="https://moonantonio.github.io/tags/clase/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>NavMesh Unity3D</title>
      <link>https://moonantonio.github.io/post/2017/clase/007/</link>
      <pubDate>Mon, 24 Apr 2017 12:52:34 +0200</pubDate>
      
      <guid>https://moonantonio.github.io/post/2017/clase/007/</guid>
      <description>Al final del proceso de implementacion de la escena, bakear los elementos que se quieran navegar.
Abrir el inspector Navigation.
Entre las 4 pestañas, usar la de objects para seleccionar todos los objetos vavegables.
Bake para bakear la escena.
Areas para seleccionar el coste de ese terreno, por ejemplo si una area tiene un coste de 1 y otra area con menor distancia hasta el punto n, el NPC ira por el de coste menor ya que llegara mas rapido.</description>
    </item>
    
    <item>
      <title>Bakeo simple en Unity3d</title>
      <link>https://moonantonio.github.io/post/2017/clase/006/</link>
      <pubDate>Thu, 09 Mar 2017 22:24:10 +0100</pubDate>
      
      <guid>https://moonantonio.github.io/post/2017/clase/006/</guid>
      <description>Bakeo simple en Unity3d 
Primero preparamos la escena, con colores planos (simples) y algun objeto para representar en la escena, como una esfera.

Luego configuramos la iluminacion para el quemado. Lo mas importante seria el echo de quitar el bakeo y seleccionar en tiempo real para preparar la escena entera.

Añadimos una pequeña animacion para el movimiento de la luz direccional para ver en tiempo real el movimiento y si esta bien configurado.</description>
    </item>
    
    <item>
      <title>Primera reunion sobre el TFG</title>
      <link>https://moonantonio.github.io/post/2017/clase/005/</link>
      <pubDate>Thu, 09 Mar 2017 22:08:02 +0100</pubDate>
      
      <guid>https://moonantonio.github.io/post/2017/clase/005/</guid>
      <description>Ambiente Algunos puntos a destacar sobre el ambiente:
 Realidad aumentada. Arboles holografiados Muscan  
 Neonizada Wadim  
 Muy vivoBravo  
 Realismo Touho  
 Variacion de profundida Touho  
Datos tecnicos  Edificios:
 LOD desde 2 planta hacia arriba.
3 Tipos de LOD.
3 tipos generales y props para modular.
   Circulacion:
 Coches solo vuelan por arriba.</description>
    </item>
    
    <item>
      <title>Clase de sistemas de particulas - Unity3D</title>
      <link>https://moonantonio.github.io/post/2017/clase/004/</link>
      <pubDate>Thu, 09 Mar 2017 22:01:36 +0100</pubDate>
      
      <guid>https://moonantonio.github.io/post/2017/clase/004/</guid>
      <description>Clase de sistemas de particulas - Unity3D 
Los parametros mas usados son, Base, emision y renderer.
 Parametros Base
 Duracion: La vida que tendra todas las particulas.
Looping: Crea un loop por el cual crea un loop de las particulas.
Prewarm: Aparecen todas las particulas directamente (No se inician poco a poco).
Start Delay: El tiempo que tardan en empezar.
Start Lifetime: El tiempo desde que sale hasta que desaparece.</description>
    </item>
    
    <item>
      <title>Agentes de Busqueda y demas.</title>
      <link>https://moonantonio.github.io/post/2017/clase/003/</link>
      <pubDate>Mon, 06 Mar 2017 12:36:44 +0100</pubDate>
      
      <guid>https://moonantonio.github.io/post/2017/clase/003/</guid>
      <description>Agentes Los agentes de busqueda, son agentes que tienen un objetivo, seguiran haciendo su funcion hasta terminar su busqueda.
Identifica una solucion adecuada dentro del arbol de busqueda.
Primero se formula el objetivo y luego se formula el problema.
 Formulacion del problema:   Estado inicial: El estado inicial del agente.
Estados: Todos los posibles estados a los que el agente puede evolucionar a traves de una secuencia.</description>
    </item>
    
    <item>
      <title>Mecanicas TFG - Investigacion</title>
      <link>https://moonantonio.github.io/post/2017/clase/002/</link>
      <pubDate>Sun, 05 Mar 2017 23:39:48 +0100</pubDate>
      
      <guid>https://moonantonio.github.io/post/2017/clase/002/</guid>
      <description>Mecanicas presentadas para el TFG Al comienzo de la investigacion, se propuso unas mecanicas Hack &amp;amp; Slash estilo Devil May Cry, en base a ellas, vimos varias propuestas y redactamos lo que serian los cimientos de las mecanicas &amp;amp; algunas funcionalidades previstas:
  Accionar y combinar combos, entre 4 estilos de lucha:    Ataque fuerte. Ataque rapido. Ataque a distancia. Salto / Salto doble.   Tambien tiene extras como:</description>
    </item>
    
    <item>
      <title>Explicacion IA basica</title>
      <link>https://moonantonio.github.io/post/2017/clase/001/</link>
      <pubDate>Wed, 01 Mar 2017 23:25:12 +0100</pubDate>
      
      <guid>https://moonantonio.github.io/post/2017/clase/001/</guid>
      <description>IA en Videojuegos (Clase) Hay diferentes tipos de IA clasificados por el tipo de uso de su algoritmo.
Los mas comunes en videojuegos son:
 Juegos de suma cero: Minimax Busqueda de caminos: A* Agentes inteligentes Maquina de estados finitos Redes neutonales Algoritmos geneticos Redes evolutivas: rtNeat  Juegos de suma cero son juegos en los que solo tienen 2 resultados, o 3. Como por ejemplo el ajedrez, Minimax es un algoritmo para realizar la eleccion de la mejor accion para ganar.</description>
    </item>
    
  </channel>
</rss>