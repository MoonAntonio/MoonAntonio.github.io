<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unity3d on lPinchol Moon&#39;s Blog</title>
    <link>https://moonantonio.github.io/categories/unity3d/index.xml</link>
    <description>Recent content in Unity3d on lPinchol Moon&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-es</language>
    <copyright>© Antonio Moon.&lt;br&gt;Powered by [Hugo](//gohugo.io/) with the [Type Theme](//github.com/digitalcraftsman/hugo-type-theme)</copyright>
    <atom:link href="https://moonantonio.github.io/categories/unity3d/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Gestor de Escenas</title>
      <link>https://moonantonio.github.io/post/2017/programacion/005/</link>
      <pubDate>Wed, 15 Mar 2017 13:02:10 +0100</pubDate>
      
      <guid>https://moonantonio.github.io/post/2017/programacion/005/</guid>
      <description>&lt;p&gt;Despues de evaluar lo necesario para el TFG, vi que requeriamos de un gestor de escenas, en la que se pudiera cambair de escena, desde el editor y en runtime con variaciones.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Editor -&amp;gt; cambiar generalmente de forma rapida y precisa.
Runtime -&amp;gt; cambiar entre cargar escena copleta y cargar mediante Sync.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Por ello propuse un &lt;strong&gt;Gestor de Escenas&lt;/strong&gt; en la que uno mismo podria cambiar siempre de escena en cualquier lado.&lt;/p&gt;

&lt;p&gt;El sistema es llamado &lt;strong&gt;Proteo&lt;/strong&gt; que hace honor a una criatura mitologia que podia asumir cualquier forma que no fuera inmovil.&lt;/p&gt;

&lt;p&gt;En la escena de test, queria sacar 3 funcionalidades.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Cambiar de forma normal la escena.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Cambiar de forma Asyncrona la escena.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Descargar alguna escena anterior.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bien ahora empezare por el sistema runtime.&lt;/p&gt;

&lt;p&gt;Al estar con Unity5 hay que agregar la using UnityEngine.SceneManagement; Si no, no podras acceder a los metodos de unity.&lt;/p&gt;

&lt;p&gt;Al sumar escenas hay un modo llamado &lt;strong&gt;LoadSceneMode.Additive&lt;/strong&gt; que seria sumar la nueva escena a la actual.&lt;/p&gt;

&lt;p&gt;Bueno y despues de esto -&amp;gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;//                                  ┌∩┐(◣_◢)┌∩┐
//                                                              
// SProteo.cs (15/03/2017)                                      
// Autor: Antonio Mateo (Moon Pincho)                              
// Descripcion:     Sistema que gestiona el cambio de escenas.      
// Fecha Mod:       15/03/2017                                  
// Ultima Mod:      Version Inicial                             
//****************************************************************\\

#region Librerias
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.SceneManagement;
#endregion

namespace MoonPincho
{
    /// &amp;lt;summary&amp;gt;
    /// &amp;lt;para&amp;gt;Sistema que gestiona el cambio de escenas&amp;lt;/para&amp;gt;
    /// &amp;lt;/summary&amp;gt;
    [AddComponentMenu(&amp;quot;Moon Pincho/Sistemas/SProteo&amp;quot;)]
    public class SProteo : MonoBehaviour 
    {
        #region Variables Publicas
        /// &amp;lt;summary&amp;gt;
        /// &amp;lt;para&amp;gt;NGUI progress bar para la carga.&amp;lt;/para&amp;gt;
        /// &amp;lt;/summary&amp;gt;
        public UISlider progressBar;                                            // NGUI progress bar para la carga
        #endregion

        #region API
        /// &amp;lt;summary&amp;gt;
        /// &amp;lt;para&amp;gt;Carga la escena dada en modo Additive.&amp;lt;/para&amp;gt;
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&amp;quot;nombre&amp;quot;&amp;gt;Nombre de la escena.&amp;lt;/param&amp;gt;
        public void LoadScene(string nombre)// Carga la escena dada en modo Additive
        {
            SceneManager.LoadScene(nombre, LoadSceneMode.Additive);
        }

        /// &amp;lt;summary&amp;gt;
        /// &amp;lt;para&amp;gt;Descarga la escena dada.&amp;lt;/para&amp;gt;
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&amp;quot;nombre&amp;quot;&amp;gt;Nombre de la escena.&amp;lt;/param&amp;gt;
        public void UnLoadScene(string nombre)// Descarga la escena dada
        {
            SceneManager.UnloadSceneAsync(nombre);
        }

        /// &amp;lt;summary&amp;gt;
        /// &amp;lt;para&amp;gt;Carga la escena dada asyncronamente.&amp;lt;/para&amp;gt;
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&amp;quot;nombre&amp;quot;&amp;gt;Nombre de la escena.&amp;lt;/param&amp;gt;
        public void LoadSceneAsyc(string nombre)// Carga la escena dada asyncronamente.
        {
            StartCoroutine(UpdateProgress(nombre));
        }

        /// &amp;lt;summary&amp;gt;
        /// &amp;lt;para&amp;gt;Descarga la escena actual.&amp;lt;/para&amp;gt;
        /// &amp;lt;/summary&amp;gt;
        public void UnLoadActual()// Descarga la escena actual.
        {
            SceneManager.UnloadSceneAsync(SceneManager.GetActiveScene().name);
        }
        #endregion

        #region Funcionalidad
        /// &amp;lt;summary&amp;gt;
        /// &amp;lt;para&amp;gt;Actualiza el progress bar mientras carga la escena Asyncronamente.&amp;lt;/para&amp;gt;
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name=&amp;quot;nombre&amp;quot;&amp;gt;Nombre de la escena.&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;Null&amp;lt;/returns&amp;gt;
        public IEnumerator UpdateProgress(string nombre)// Actualiza el progress bar mientras carga la escena Asyncronamente
        {
            AsyncOperation cargando = SceneManager.LoadSceneAsync(nombre);

            while (!cargando.isDone)
            {
                this.progressBar.value = cargando.progress;
                Debug.Log(cargando.progress);
                yield return null;
            }
        }
        #endregion
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;center&gt;&lt;a href=&#34;https://github.com/MoonAntonio/GestorEscenasUnity&#34; class=&#34;button&#34;&gt;Moon Pincho Github&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bakeo simple en Unity3d</title>
      <link>https://moonantonio.github.io/post/2017/clase/006/</link>
      <pubDate>Thu, 09 Mar 2017 22:24:10 +0100</pubDate>
      
      <guid>https://moonantonio.github.io/post/2017/clase/006/</guid>
      <description>

&lt;h1 id=&#34;bakeo-simple-en-unity3d&#34;&gt;Bakeo simple en Unity3d&lt;/h1&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://moonantonio.github.io/img/unity/ligh00.png&#34; alt=&#34;001&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Primero preparamos la escena, con colores planos (simples) y algun objeto para representar en la escena, como una
esfera.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://moonantonio.github.io/img/unity/ligh01.jpg&#34; alt=&#34;001&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Luego configuramos la iluminacion para el quemado. Lo mas importante seria el echo de quitar el bakeo y seleccionar en tiempo real para preparar la escena entera.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://moonantonio.github.io/img/unity/ligh02.jpg&#34; alt=&#34;001&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Añadimos una pequeña animacion para el movimiento de la luz direccional para ver en tiempo real el movimiento y si esta bien configurado.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
public float v = 5;
private void Update(){transform.Rotate(new Vector3(0,v,0),Space.World);}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Despues de ver que todo funciona correctamente.
Implementar un Reflection Probe para ver el reflejo de las zonas donde se quieran reflejar.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://moonantonio.github.io/img/unity/ligh03.jpg&#34; alt=&#34;001&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Configurar el probe:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Tipo de reflejo&lt;/li&gt;
&lt;li&gt;Cuando refresca&lt;/li&gt;
&lt;li&gt;Resolucion&lt;/li&gt;
&lt;li&gt;HDR&lt;/li&gt;
&lt;li&gt;Etc..&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Luego importamos el paquete de unity de characters y instanciamos unos cuantos personajes con AI y un nav mesh para que se pueda mover.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://moonantonio.github.io/img/unity/ligh04.jpg&#34; alt=&#34;001&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Luego ponemos una esfera o un cubo de objetivo y al darle play el personaje seguira al objetivo.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://moonantonio.github.io/img/unity/ligh05.jpg&#34; alt=&#34;001&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Pero el jugador no se ilumina bien por lo que creamos grupos de probes para conseguir toda la reflexion posible.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://moonantonio.github.io/img/unity/ligh06.gif&#34; alt=&#34;001&#34; /&gt;&lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Clase de sistemas de particulas - Unity3D</title>
      <link>https://moonantonio.github.io/post/2017/clase/004/</link>
      <pubDate>Thu, 09 Mar 2017 22:01:36 +0100</pubDate>
      
      <guid>https://moonantonio.github.io/post/2017/clase/004/</guid>
      <description>

&lt;h1 id=&#34;clase-de-sistemas-de-particulas-unity3d&#34;&gt;Clase de sistemas de particulas - Unity3D&lt;/h1&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://moonantonio.github.io/img/clases/part.png&#34; alt=&#34;001&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Los parametros mas usados son, Base, emision y renderer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Parametros Base&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Duracion: La vida que tendra todas las particulas.&lt;/p&gt;

&lt;p&gt;Looping: Crea un loop por el cual crea un loop de las particulas.&lt;/p&gt;

&lt;p&gt;Prewarm: Aparecen todas las particulas directamente (No se inician poco a poco).&lt;/p&gt;

&lt;p&gt;Start Delay: El tiempo que tardan en empezar.&lt;/p&gt;

&lt;p&gt;Start Lifetime: El tiempo desde que sale hasta que desaparece.&lt;/p&gt;

&lt;p&gt;Start Speed: La velocidad inicial de las particulas.&lt;/p&gt;

&lt;p&gt;3D Start Size: Modifica la malla para estirar las particulas.&lt;/p&gt;

&lt;p&gt;Start Size: Tamaño inicial de las particulas.&lt;/p&gt;

&lt;p&gt;3D Start Rotacion: Modifica la rotacion de las particulas.&lt;/p&gt;

&lt;p&gt;Randomize Rotacion: Rotacion aleatoria.&lt;/p&gt;

&lt;p&gt;Start Color: Color inicial.&lt;/p&gt;

&lt;p&gt;Gravity Modifier: Gravedad para las particulas.&lt;/p&gt;

&lt;p&gt;Simulation Space: Cambiar el pivote.&lt;/p&gt;

&lt;p&gt;Scaling Mode: Escalar en el espacio global o loca.&lt;/p&gt;

&lt;p&gt;Play On Awake: Reproducir cuando uses Awake.&lt;/p&gt;

&lt;p&gt;Max particle: Numero maximo de particulas del sistema.&lt;/p&gt;

&lt;p&gt;Auto Random Seed: Donde van a aparecer desde el punto de vision las particulas.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Parametros Emission&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Rate: Numero de particulas por segundo que se van a emitir.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Parametros Shape&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Shape: La forma que va a coger la particula.&lt;/p&gt;

&lt;p&gt;Angle: Angulo de las particulas&lt;/p&gt;

&lt;p&gt;Radius: Aumenta o disminuye el radio.&lt;/p&gt;

&lt;p&gt;Emit from: Modifica la zona de emision.&lt;/p&gt;

&lt;p&gt;Random Direction: Direccion aleatoria.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Parametros Renderer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Render Mode: Billboard (Orientado a la camara), tipo de renderizado
Normal Direction: Direccion de la normal&lt;/p&gt;

&lt;p&gt;Material: Material a renderizar&lt;/p&gt;

&lt;p&gt;Sort Mode: Que particulas iran por delante de lo demas.&lt;/p&gt;

&lt;p&gt;Sorting Fugde: Lo mismo&lt;/p&gt;

&lt;p&gt;Cast Shadorws: Proyecten sombras&lt;/p&gt;

&lt;p&gt;Receiver Shadows: Recibir sombras&lt;/p&gt;

&lt;p&gt;Min Particle Size: Tamaño de las particulas minimo.&lt;/p&gt;

&lt;p&gt;Max Particle Size: Tamaño de las particulas maximo.&lt;/p&gt;

&lt;p&gt;Sorting Layer: La capa&lt;/p&gt;

&lt;p&gt;Order in Layer: Orden de la capa.&lt;/p&gt;

&lt;p&gt;Billboard alignment: Alineacion del billboard.&lt;/p&gt;

&lt;p&gt;Pivot: Pivote general&lt;/p&gt;

&lt;p&gt;Light Probes: Si se utilizan los probes&lt;/p&gt;

&lt;p&gt;Reflection Probes: Si se utiliza reflection&lt;/p&gt;

&lt;p&gt;Anchor override: La posicion&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MTodo Tool - Unity3D</title>
      <link>https://moonantonio.github.io/post/2017/programacion/004/</link>
      <pubDate>Thu, 09 Mar 2017 21:54:00 +0100</pubDate>
      
      <guid>https://moonantonio.github.io/post/2017/programacion/004/</guid>
      <description>

&lt;h1 id=&#34;center-mtodo-tool-unity3d-center-br&#34;&gt;&lt;center&gt;MTodo Tool - Unity3D&lt;/center&gt;&lt;/br&gt;&lt;/h1&gt;

&lt;p&gt;Herramienta sencilla para hacer un seguimiento del codigo en Unity3D&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://moonantonio.github.io/img/Dev/mtodo.png&#34; alt=&#34;001&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;MTodo analiza la sintaxis de tu codigo con categorias.
Por ejemplo, supongamos que tienes una categoria de BUG.&lt;/p&gt;

&lt;p&gt;En la linea de tu codigo donde se encuentra ese bug, pondria :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;// &amp;lt; Categoria &amp;gt; &amp;lt; Mensaje &amp;gt;&lt;/p&gt;

&lt;p&gt;// BUG Aqui hay un bug.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;De este modo, tendras en un sitio todos los mensajes que vallas dejando, siempre y cuando uses primero la categoria.&lt;/p&gt;

&lt;p&gt;Despues solo tienes que ir, dandole click en el mensaje, y se te abrira tu IDE por la linea donde esta.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;a href=&#34;https://github.com/MOON-TYPE/MTodo&#34; class=&#34;button&#34;&gt;GitHub&lt;/a&gt;&lt;/center&gt;
&lt;center&gt;&lt;a href=&#34;https://trello.com/b/ZPmPLDJ8&#34; class=&#34;button&#34;&gt;Trello&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;\- Moon Pincho&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MDevScripts y por que.</title>
      <link>https://moonantonio.github.io/post/2017/programacion/003/</link>
      <pubDate>Thu, 09 Mar 2017 21:50:01 +0100</pubDate>
      
      <guid>https://moonantonio.github.io/post/2017/programacion/003/</guid>
      <description>

&lt;h1 id=&#34;por-que-publicar-algo-tan-sencillo&#34;&gt;¿Por que publicar algo tan sencillo?&lt;/h1&gt;

&lt;p&gt;Bueno, simplemente para poder hacer rapidamente funcionalidades sin tener que crear scripts nuevos y sin tener que arbitrar entre la solucion mas optima, ya que es un prototipado lo que primero se hace.&lt;/p&gt;

&lt;p&gt;Por ello uso estos scripts, que hacen que por ejemplo el environment se cree rapidamente y asi concentrarme en la mecanica que en si es la que mas trabajo lleva de un prototipo.&lt;/p&gt;

&lt;p&gt;Esto como ya digo es algo complementario y esta claro que se puede hacer mucho mejor, pero solo e creado una base de la que se puede seguir incorporando nuevas funcionalidades abiertas para nuevos desafios.&lt;/p&gt;

&lt;p&gt;De momento solo se han creado 3 scripts basicos, pero aun hay muchos por llegar: &lt;a href=&#34;https://github.com/MOON-TYPE/MDevScripts/projects/1&#34; class=&#34;button&#34;&gt;Proximas incorporaciones.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Actualmente hay:&lt;/p&gt;

&lt;h2 id=&#34;scripts&#34;&gt;Scripts&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;AutoDestroy.cs&lt;/strong&gt; | Autodestruye un objeto.
&lt;center&gt;&lt;img src=&#34;https://moonantonio.github.io/img/github/autodest.gif&#34; alt=&#34;001&#34; /&gt;&lt;/center&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;AutoIntensidadLight.cs&lt;/strong&gt; | Auto aumenta y disminuye la intensidad de la luz.
&lt;center&gt;&lt;img src=&#34;https://moonantonio.github.io/img/github/autoint.gif&#34; alt=&#34;001&#34; /&gt;&lt;/center&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;AutoMove.cs&lt;/strong&gt; | Mueve un objeto de un punto A(Actual) a un punto B(Destino).
&lt;center&gt;&lt;img src=&#34;https://moonantonio.github.io/img/github/automov.gif&#34; alt=&#34;001&#34; /&gt;&lt;/center&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;center&gt;&lt;a href=&#34;https://github.com/MOON-TYPE/MDevScripts&#34; class=&#34;button&#34;&gt;Proyecto GitHub.&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;\- Moon Pincho&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Unity3D Preloader [Logo]</title>
      <link>https://moonantonio.github.io/post/2017/programacion/002/</link>
      <pubDate>Sat, 04 Mar 2017 23:23:58 +0100</pubDate>
      
      <guid>https://moonantonio.github.io/post/2017/programacion/002/</guid>
      <description>

&lt;h1 id=&#34;unity-preloader&#34;&gt;Unity Preloader&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;Escena de preloader en Unity3D con varios ejemplos. Se puede usar plugins como NGUI o si lo prefieres el mismo UGUI.&lt;/p&gt;

&lt;p&gt;Esta version esta probada para &lt;strong&gt;Unity3D 5.5.1p4&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;El planteamiento era que el logo siguiente, hiciera un fade-in y un fade-out en un tiempo.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://moonantonio.github.io/img/github/preloader0.png&#34; alt=&#34;001&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;antes-de-empezar&#34;&gt;Antes de empezar:&lt;/h2&gt;

&lt;p&gt;Para &lt;strong&gt;&lt;em&gt;UGUI&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Solo tienes que entrar a la escena de ejemplo(SandBox) y reproducir.&lt;/p&gt;

&lt;p&gt;Para &lt;strong&gt;&lt;em&gt;NGUI&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Si se va a usar con NGUI, importar primero el plugin de NGUI y despues el package de u.preloader, sino podras tener errores en las escenas de los ejemplos.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;En la definicion de simbolos (Scripting Define Symbols), hay que definirle NGUI para que reconozca que tienes NGUI en tu proyecto.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://moonantonio.github.io/img/github/preloader1.png&#34; alt=&#34;001&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Por ultimo solo tienes que desactivar el Canvas y activar el RootUI.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://moonantonio.github.io/img/github/preloader2.png&#34; alt=&#34;001&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;acabado&#34;&gt;Acabado&lt;/h2&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://moonantonio.github.io/img/github/preloader3.gif&#34; alt=&#34;001&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;assets&#34;&gt;Assets:&lt;/h2&gt;

&lt;p&gt;La imagen del logo de prueba es de &lt;a href=&#34;http://www.pixiv.net/member.php?id=2243289&#34;&gt;ナダレ&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;repositorio&#34;&gt;Repositorio&lt;/h2&gt;

&lt;p&gt;&lt;center&gt;&lt;a href=&#34;https://github.com/lPinchol/u.preloader&#34; class=&#34;button&#34;&gt;Moon Pincho Github&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>