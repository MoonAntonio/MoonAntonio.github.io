<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unity3D on Antonio Moon´s</title>
    <link>https://moonantonio.github.io/categories/unity3d/</link>
    <description>Recent content in Unity3D on Antonio Moon´s</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-es</language>
    <lastBuildDate>Tue, 05 Feb 2019 14:38:50 +0100</lastBuildDate>
    
	<atom:link href="https://moonantonio.github.io/categories/unity3d/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Shaders (Ley de Lambert) y Cell Shading (Toon)</title>
      <link>https://moonantonio.github.io/post/2019/dev/002/</link>
      <pubDate>Tue, 05 Feb 2019 14:38:50 +0100</pubDate>
      
      <guid>https://moonantonio.github.io/post/2019/dev/002/</guid>
      <description>En post anteriores exploramos cómo podemos cambiar las propiedades físicas para simular diferentes materiales utilizando Surface Shaders. Un modelo de iluminación es responsable de tomar estas propiedades y calcular el tono final de cada píxel.
Comenzaremos con uno realmente simple sobre el que podemos construir, un modelo de iluminación de Lambert. Para ello, debemos saber que es la ley de Lambert.
Ley de Lambert
 La ley de Lambert trata sobre la iluminancia de una superficie situada a una cierta distancia de una fuente de luz.</description>
    </item>
    
    <item>
      <title>WebClient gestor de conexiones Unity3D</title>
      <link>https://moonantonio.github.io/post/2018/dev/007/</link>
      <pubDate>Fri, 06 Jul 2018 23:46:32 +0200</pubDate>
      
      <guid>https://moonantonio.github.io/post/2018/dev/007/</guid>
      <description>WebClient es un componente del lado del cliente, un modelo distribuido de aplicaciones de niveles múltiples utilizado para crear y desarrollar aplicaciones empresariales. Los componentes del lado del cliente son típicamente aplicaciones de computadora que se ejecutan en la computadora de un usuario y se conectan a un servidor. Estos componentes realizan operaciones en el lado del cliente, ya que pueden necesitar acceso a la información disponible solo en el lado del cliente, como la entrada del usuario, o porque el servidor carece de la potencia de procesamiento necesaria en tales operaciones.</description>
    </item>
    
    <item>
      <title>Unity3D Plugins ¿Que son?</title>
      <link>https://moonantonio.github.io/post/2018/dev/003/</link>
      <pubDate>Sat, 26 May 2018 00:57:20 +0200</pubDate>
      
      <guid>https://moonantonio.github.io/post/2018/dev/003/</guid>
      <description>Hoy decidi compartir, algo que creo que no es un &amp;ldquo;conocimiento común&amp;rdquo; y no hay muchos recursos sobre ese tema en Internet, despues de que varios colegas que estan empezando en este mundo, me preguntasen como poder usar APIs en otros lenguajes en Unity3D, como por ejemplo el SKD de Steam que esta en C++ o las librerias .JAR de Android decidi crear una entrada nueva. Mostrare como crear bibliotecas simples de C/C++ para Unity3D.</description>
    </item>
    
    <item>
      <title>Efectos de camara</title>
      <link>https://moonantonio.github.io/post/2017/diario/009/</link>
      <pubDate>Sat, 06 May 2017 03:19:13 +0200</pubDate>
      
      <guid>https://moonantonio.github.io/post/2017/diario/009/</guid>
      <description>Antes de nada, es precisa una customizacion rapida ya que Pros Proccesing Stack no esta integrado aun de forma natica en Unity.
Primero en la camara, activar HDR y desactivar MSA, por otro lado tambien poner defered para aumentar el realismo de la iluminacion.
Por ultimo en los ajustes de graficos, quitar el anti-aliasing que viene por defecto de unity.
Anti-Aliased Es un proceso de reduccion de los bordes dentados , con la que se añade una interpolacion para tratar de suavizar los bordes y dejarlos mas lisos.</description>
    </item>
    
    <item>
      <title>Iluminacion con Unity 5</title>
      <link>https://moonantonio.github.io/post/2017/utiles/004/</link>
      <pubDate>Sat, 18 Mar 2017 18:59:13 +0100</pubDate>
      
      <guid>https://moonantonio.github.io/post/2017/utiles/004/</guid>
      <description>Jeryce Dianingana compartió sus pensamientos sobre la construcción de escenas realistas mejoradas en Unity 5.

Poner a prueba la iluminación de Unity Siempre he querido reproducir una iluminación real desde un entorno real, así que probé en un primer momento para tomar la foto real en mi ciudad, apartamento, pero no soy una buena fotografa, así que fui a Pinterest, Me encanta este sitio web, es uno de los mejores para mí para encontrar la referencia.</description>
    </item>
    
    <item>
      <title>Gestor de Escenas</title>
      <link>https://moonantonio.github.io/post/2017/programacion/005/</link>
      <pubDate>Wed, 15 Mar 2017 13:02:10 +0100</pubDate>
      
      <guid>https://moonantonio.github.io/post/2017/programacion/005/</guid>
      <description>Despues de evaluar lo necesario para el TFG, vi que requeriamos de un gestor de escenas, en la que se pudiera cambair de escena, desde el editor y en runtime con variaciones.
 Editor -&amp;gt; cambiar generalmente de forma rapida y precisa. Runtime -&amp;gt; cambiar entre cargar escena copleta y cargar mediante Sync.
 Por ello propuse un Gestor de Escenas en la que uno mismo podria cambiar siempre de escena en cualquier lado.</description>
    </item>
    
    <item>
      <title>Bakeo simple en Unity3d</title>
      <link>https://moonantonio.github.io/post/2017/clase/006/</link>
      <pubDate>Thu, 09 Mar 2017 22:24:10 +0100</pubDate>
      
      <guid>https://moonantonio.github.io/post/2017/clase/006/</guid>
      <description>Bakeo simple en Unity3d 
Primero preparamos la escena, con colores planos (simples) y algun objeto para representar en la escena, como una esfera.

Luego configuramos la iluminacion para el quemado. Lo mas importante seria el echo de quitar el bakeo y seleccionar en tiempo real para preparar la escena entera.

Añadimos una pequeña animacion para el movimiento de la luz direccional para ver en tiempo real el movimiento y si esta bien configurado.</description>
    </item>
    
    <item>
      <title>Clase de sistemas de particulas - Unity3D</title>
      <link>https://moonantonio.github.io/post/2017/clase/004/</link>
      <pubDate>Thu, 09 Mar 2017 22:01:36 +0100</pubDate>
      
      <guid>https://moonantonio.github.io/post/2017/clase/004/</guid>
      <description>Clase de sistemas de particulas - Unity3D 
Los parametros mas usados son, Base, emision y renderer.
 Parametros Base
 Duracion: La vida que tendra todas las particulas.
Looping: Crea un loop por el cual crea un loop de las particulas.
Prewarm: Aparecen todas las particulas directamente (No se inician poco a poco).
Start Delay: El tiempo que tardan en empezar.
Start Lifetime: El tiempo desde que sale hasta que desaparece.</description>
    </item>
    
    <item>
      <title>MTodo Tool - Unity3D</title>
      <link>https://moonantonio.github.io/post/2017/programacion/004/</link>
      <pubDate>Thu, 09 Mar 2017 21:54:00 +0100</pubDate>
      
      <guid>https://moonantonio.github.io/post/2017/programacion/004/</guid>
      <description>MTodo Tool - Unity3D Herramienta sencilla para hacer un seguimiento del codigo en Unity3D

MTodo analiza la sintaxis de tu codigo con categorias. Por ejemplo, supongamos que tienes una categoria de BUG.
En la linea de tu codigo donde se encuentra ese bug, pondria :
 // &amp;lt; Categoria &amp;gt; &amp;lt; Mensaje &amp;gt;
// BUG Aqui hay un bug.
 De este modo, tendras en un sitio todos los mensajes que vallas dejando, siempre y cuando uses primero la categoria.</description>
    </item>
    
    <item>
      <title>MDevScripts y por que.</title>
      <link>https://moonantonio.github.io/post/2017/programacion/003/</link>
      <pubDate>Thu, 09 Mar 2017 21:50:01 +0100</pubDate>
      
      <guid>https://moonantonio.github.io/post/2017/programacion/003/</guid>
      <description>¿Por que publicar algo tan sencillo? Bueno, simplemente para poder hacer rapidamente funcionalidades sin tener que crear scripts nuevos y sin tener que arbitrar entre la solucion mas optima, ya que es un prototipado lo que primero se hace.
Por ello uso estos scripts, que hacen que por ejemplo el environment se cree rapidamente y asi concentrarme en la mecanica que en si es la que mas trabajo lleva de un prototipo.</description>
    </item>
    
    <item>
      <title>Unity3D Preloader [Logo]</title>
      <link>https://moonantonio.github.io/post/2017/programacion/002/</link>
      <pubDate>Sat, 04 Mar 2017 23:23:58 +0100</pubDate>
      
      <guid>https://moonantonio.github.io/post/2017/programacion/002/</guid>
      <description>Unity Preloader Escena de preloader en Unity3D con varios ejemplos. Se puede usar plugins como NGUI o si lo prefieres el mismo UGUI.
Esta version esta probada para Unity3D 5.5.1p4.
El planteamiento era que el logo siguiente, hiciera un fade-in y un fade-out en un tiempo.

Antes de empezar: Para UGUI
Solo tienes que entrar a la escena de ejemplo(SandBox) y reproducir.
Para NGUI
  Si se va a usar con NGUI, importar primero el plugin de NGUI y despues el package de u.</description>
    </item>
    
  </channel>
</rss>